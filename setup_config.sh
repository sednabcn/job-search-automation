#!/bin/bash
# Setup script for Job Search CLI
# This script sets up the necessary files and validates the configuration

set -e

echo "🚀 Setting up Job Search CLI..."
echo ""

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print colored output
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check Python version
echo "Checking Python version..."
python_version=$(python3 --version 2>&1 | awk '{print $2}')
print_success "Python $python_version detected"

# Install dependencies
echo ""
echo "Installing dependencies..."
if [ -f requirements.txt ]; then
    pip3 install -r requirements.txt --break-system-packages
    print_success "Dependencies installed from requirements.txt"
else
    pip3 install pyyaml requests beautifulsoup4 --break-system-packages
    print_success "Basic dependencies installed"
fi

# Create minimal config if it doesn't exist
echo ""
if [ ! -f job-manager-config.yml ]; then
    print_warning "Config file not found, creating minimal config..."
    cat > job-manager-config.yml << 'EOF'
# Job Search Configuration
# Edit this file to customize your search parameters

platforms:
  linkedin:
    max_results_per_search: 50
  
  glassdoor:
    max_results_per_search: 50
  
  indeed:
    max_results_per_search: 50
  
  reed:
    max_results_per_search: 50

search:
  target_roles:
    - "Senior Software Engineer"
    - "Staff Engineer"
    - "Principal Engineer"
  
  default_location: "London"
  
  # Optional: Set salary expectations
  # min_salary: 80000
  # max_salary: 150000

# Optional sections (generated by extract-keywords command):
# - matching: keyword matching and scoring rules
# - generated_at: timestamp of last keyword extraction
# - metadata: statistics about analyzed jobs
EOF
    print_success "Created job-manager-config.yml"
else
    print_success "Config file already exists"
fi

# Create tracking directory
echo ""
if [ ! -d job_search ]; then
    mkdir -p job_search
    print_success "Created job_search directory for tracking data"
else
    print_success "Tracking directory already exists"
fi

# Validate configuration
echo ""
echo "Validating configuration..."
if python3 validate_config.py --config job-manager-config.yml; then
    print_success "Configuration is valid!"
else
    print_error "Configuration validation failed"
    echo ""
    echo "You can fix this by:"
    echo "  1. Editing job-manager-config.yml manually"
    echo "  2. Running: python3 job_search_cli.py extract-keywords --update-config"
    exit 1
fi

# Test CLI
echo ""
echo "Testing CLI..."
if python3 job_search_cli.py --help > /dev/null 2>&1; then
    print_success "CLI is working correctly"
else
    print_error "CLI test failed"
    exit 1
fi

# Print next steps
echo ""
echo "════════════════════════════════════════════════════════════"
echo "🎉 Setup Complete!"
echo "════════════════════════════════════════════════════════════"
echo ""
echo "Next steps:"
echo ""
echo "1️⃣  Edit your configuration:"
echo "   nano job-manager-config.yml"
echo ""
echo "2️⃣  Search for jobs:"
echo "   python3 job_search_cli.py search \\"
echo "     --positions \"Senior Engineer\" \"Tech Lead\" \\"
echo "     --location \"London\""
echo ""
echo "3️⃣  Track an application:"
echo "   python3 job_search_cli.py track add \\"
echo "     --company \"Acme Corp\" \\"
echo "     --position \"Senior Developer\" \\"
echo "     --url \"https://...\" \\"
echo "     --source \"linkedin\""
echo ""
echo "4️⃣  Add a networking contact:"
echo "   python3 job_search_cli.py network add \\"
echo "     --name \"John Doe\" \\"
echo "     --company \"Tech Co\" \\"
echo "     --title \"Engineering Manager\""
echo ""
echo "5️⃣  View help for all commands:"
echo "   python3 job_search_cli.py --help"
echo ""
echo "════════════════════════════════════════════════════════════"
echo ""
print_success "Ready to start your job search! 🚀"
