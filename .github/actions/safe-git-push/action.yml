name: 'Safe Git Push'
description: 'Commit and push changes with automatic conflict resolution'

inputs:
  commit-message:
    description: 'Commit message'
    required: true
  files:
    description: 'Files to add (space-separated or glob pattern)'
    required: true
  max-retries:
    description: 'Maximum retry attempts'
    default: '5'
  allow-empty:
    description: 'Allow empty commits'
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Commit and push with retry
      shell: bash
      run: |
        set +e  # Don't exit on error
        
        # Set up git config
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        echo "üì¶ Adding files..."
        FILES_ADDED=0
        
        # Process each file pattern
        for pattern in ${{ inputs.files }}; do
          echo "  Checking: $pattern"
          
          # Check if pattern matches any files
          if compgen -G "$pattern" > /dev/null 2>&1; then
            # Pattern matches - add files
            git add "$pattern" 2>/dev/null && {
              FILES_ADDED=1
              echo "    ‚úÖ Added: $pattern"
            } || echo "    ‚ö†Ô∏è  Failed to add: $pattern"
          else
            # No match - check if it's a single file
            if [ -e "$pattern" ]; then
              git add "$pattern" 2>/dev/null && {
                FILES_ADDED=1
                echo "    ‚úÖ Added: $pattern"
              } || echo "    ‚ö†Ô∏è  Failed to add: $pattern"
            else
              echo "    ‚è≠Ô∏è  Not found: $pattern (skipping)"
            fi
          fi
        done
        
        # Check if there are any staged changes
        if git diff --staged --quiet; then
          if [ "${{ inputs.allow-empty }}" = "true" ]; then
            echo "‚ö†Ô∏è  No changes to commit (allow-empty is true)"
            git commit --allow-empty -m "${{ inputs.commit-message }}"
          else
            echo "‚ö†Ô∏è  No changes to commit"
            exit 0
          fi
        else
          echo "‚úÖ Changes staged, creating commit..."
          git commit -m "${{ inputs.commit-message }}" || {
            echo "‚ö†Ô∏è  Commit failed"
            exit 0
          }
        fi
        
        # Push with retry and automatic conflict resolution
        echo "üöÄ Pushing changes..."
        MAX_RETRIES=${{ inputs.max-retries }}
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if git push; then
            echo "‚úÖ Changes pushed successfully"
            exit 0
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "‚ö†Ô∏è  Push failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
              
              # Exponential backoff
              SLEEP_TIME=$((RETRY_COUNT * 2))
              echo "   Waiting ${SLEEP_TIME}s before retry..."
              sleep $SLEEP_TIME
              
              # Get current branch name
              BRANCH_NAME="${GITHUB_REF##*/}"
              echo "   Pulling latest changes from $BRANCH_NAME..."
              
              # Try rebase first (cleaner history)
              if git pull --rebase origin "$BRANCH_NAME" 2>&1; then
                echo "   ‚úÖ Rebased successfully"
              else
                echo "   ‚ö†Ô∏è  Rebase failed, trying merge..."
                git rebase --abort 2>/dev/null || true
                
                if git pull --no-rebase origin "$BRANCH_NAME" 2>&1; then
                  echo "   ‚úÖ Merged successfully"
                else
                  echo "   ‚ùå Both rebase and merge failed"
                  # Show what went wrong
                  git status
                  exit 1
                fi
              fi
            else
              echo "‚ùå Failed to push after $MAX_RETRIES attempts"
              git status
              exit 1
            fi
          fi
        done
