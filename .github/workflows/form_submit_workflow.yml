name: Add Job Search Data via Form

on:
  workflow_dispatch:
    inputs:
      data_type:
        description: "Type of data (application/contact/search)"
        required: true
        default: "application"
      json_data:
        description: "JSON object to add"
        required: true
        default: '{"company": "OpenAI", "position": "AI Researcher"}'

permissions:
  contents: write
  issues: write

jobs:
  add-data:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set directory variables
        id: dirs
        run: |
          DATA_DIR="${{ github.event.inputs.data_directory }}"
          if [ -z "$DATA_DIR" ]; then
            DATA_DIR="job_search"
          fi
          DATA_DIR="${DATA_DIR%/}"
          
          echo "data_dir=$DATA_DIR" >> $GITHUB_OUTPUT
          echo "system_dir=job_search_system" >> $GITHUB_OUTPUT
          echo "Using data directory: $DATA_DIR"
      
      - name: Ensure directory structure
        run: |
          mkdir -p "${{ steps.dirs.outputs.data_dir }}" "${{ steps.dirs.outputs.system_dir }}"
          
          for file in applications network_contacts saved_searches; do
            FILE_PATH="${{ steps.dirs.outputs.data_dir }}/${file}.json"
            if [ ! -f "$FILE_PATH" ]; then
              echo "[]" > "$FILE_PATH"
              echo "Created: $FILE_PATH"
            else
              echo "Found existing: $FILE_PATH"
            fi
          done

      - name: Verify json_updater.py exists
        run: |
          SCRIPT_PATH="${{ steps.dirs.outputs.system_dir }}/json_updater.py"
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "‚ùå Error: json_updater.py not found at $SCRIPT_PATH"
            exit 1
          fi
          echo "‚úÖ Found json_updater.py"

      - name: Process JSON data
        id: process
        run: |
          set +e
          
          # Call the Python script with proper argument syntax
          python3 "${{ steps.dirs.outputs.system_dir }}/json_updater.py" \
            --type "${{ github.event.inputs.data_type }}" \
            --json '${{ github.event.inputs.json_data }}' \
            --tracking-dir "${{ steps.dirs.outputs.data_dir }}" \
            > result.json
          
          EXIT_CODE=$?
          set -e
          
          # Parse the JSON result
          SUCCESS=$(python3 -c "import json; print(json.load(open('result.json'))['success'])")
          MESSAGE=$(python3 -c "import json; print(json.load(open('result.json'))['message'])")
          
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          
          echo "Result: success=$SUCCESS | message=$MESSAGE | exit_code=$EXIT_CODE"

      - name: Handle success
        if: steps.process.outputs.success == 'True'
        run: echo "‚úÖ Data added successfully!"

      - name: Handle duplicate entry
        if: steps.process.outputs.success == 'False'
        run: |
          echo "‚ö†Ô∏è Entry already exists: ${{ steps.process.outputs.message }}"
          echo "This is not an error - the data is already tracked."
          
      - name: Commit changes
        if: steps.process.outputs.success == 'True'
        run: |
          git config --global user.name "Job Search Bot"
          git config --global user.email "bot@jobsearch.local"
          
          git add "${{ steps.dirs.outputs.data_dir }}/"
          
          DATA_TYPE="${{ github.event.inputs.data_type }}"
          DATA_DIR="${{ steps.dirs.outputs.data_dir }}"
          git commit -m "Add new ${DATA_TYPE} to ${DATA_DIR} via web form - $(date +%Y-%m-%d)" || echo "No changes"
          git push
      
      - name: Create success issue
        if: steps.process.outputs.success == 'True'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python << 'EOF'
          import os
          import json
          import requests
          from datetime import datetime

          github_token = os.environ.get('GITHUB_TOKEN')
          repo = os.environ.get('GITHUB_REPOSITORY')
          data_type = "${{ github.event.inputs.data_type }}"
          data_dir = "${{ steps.dirs.outputs.data_dir }}"
          message = "${{ steps.process.outputs.message }}"
          json_data = '''${{ github.event.inputs.json_data }}'''

          try:
              parsed_data = json.loads(json_data)
              
              if data_type == "application":
                  title = f"‚úÖ Application Added: {parsed_data.get('company')} - {parsed_data.get('position')}"
                  body = f"""# New Application Tracked

          **Company:** {parsed_data.get('company')}  
          **Position:** {parsed_data.get('position')}  
          **Source:** {parsed_data.get('source', 'N/A')}  
          **Status:** {parsed_data.get('status', 'N/A')}  
          **URL:** {parsed_data.get('url', 'N/A')}

          **Next Steps:**
          - Follow up in 7 days ({parsed_data.get('follow_up_date', 'TBD')})
          - Track response
          - Update status as needed

          ---
          *Added to `{data_dir}/` via web form on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
          """
              
              elif data_type == "contact":
                  title = f"üë§ Contact Added: {parsed_data.get('name')}"
                  body = f"""# New Contact Added to Network

          **Name:** {parsed_data.get('name')}  
          **Company:** {parsed_data.get('company', 'N/A')}  
          **Position:** {parsed_data.get('position', 'N/A')}  
          **Relationship:** {parsed_data.get('relationship_strength', 'N/A')}  
          **LinkedIn:** {parsed_data.get('linkedin_url', 'N/A')}
          
          **Context:** {parsed_data.get('connection_context', 'N/A')}
          
          **Next Steps:**
          - Follow up in 14 days
          - Engage with their content
          - Build relationship before asking for referrals

          ---
          *Added to `{data_dir}/` via web form on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
          """
              
              elif data_type == "search":
                  title = f"üîç Saved Search Added: {parsed_data.get('name')}"
                  keywords = ', '.join(parsed_data.get('keywords', []))
                  boards = ', '.join(parsed_data.get('boards', []))
                  body = f"""# New Saved Search Created

          **Search Name:** {parsed_data.get('name')}  
          **Keywords:** {keywords}  
          **Location:** {parsed_data.get('location', 'Remote')}  
          **Job Boards:** {boards}  
          **Min Salary:** ${parsed_data.get('min_salary', 'N/A')}  
          **Experience:** {parsed_data.get('experience_level', 'N/A')}

          **Next Steps:**
          - Check search results daily
          - Adjust keywords if needed
          - Set up job alerts on each board

          ---
          *Added to `{data_dir}/` via web form on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
          """
              
              else: 
                  title = f"‚úÖ Data Added: {data_type}"
                  body = f"New {data_type} added successfully to `{data_dir}/`.\n\n{message}"
              
              headers = {
                  'Authorization': f'token {github_token}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              data = {
                  'title': title,
                  'body': body,
                  'labels': ['job-search', 'form-submission', data_type]
              }
              
              response = requests.post(
                  f'https://api.github.com/repos/{repo}/issues',
                  headers=headers,
                  json=data,
                  timeout=30
              )
              
              if response.status_code == 201:
                  issue = response.json()
                  print(f"‚úÖ Created issue #{issue['number']}: {title}")
              else:
                  print(f"‚ö†Ô∏è Failed to create issue: {response.status_code}")
                  print(response.text)

          except Exception as e:
              print(f"‚ùå Error creating issue: {e}")
          EOF
