name: Add Job Search Data via Form

on:
  workflow_dispatch:
    inputs:
      data_type:
        description: "Type of data (application/contact/search)"
        required: true
        default: "application"
      json_data:
        description:  "JSON object to add"
        required: true
        default:  '{"company": "OpenAI", "position": "AI Researcher"}'

permissions:
  contents: write
  issues: write

jobs:
  add-data:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set directory variables
        id: dirs
        run: |
          # Use provided directory or default
          DATA_DIR="${{ github.event.inputs.data_directory }}"
          if [ -z "$DATA_DIR" ]; then
            DATA_DIR="job_search"
          fi
          
          # Remove trailing slashes
          DATA_DIR="${DATA_DIR%/}"
          
          echo "data_dir=$DATA_DIR" >> $GITHUB_OUTPUT
          echo "system_dir=job_search_system" >> $GITHUB_OUTPUT
          echo "Using data directory: $DATA_DIR"
      
      - name: Ensure directory structure
        run: |
          mkdir -p "${{ steps.dirs.outputs.data_dir }}" "${{ steps.dirs.outputs.system_dir }}"
          
          # Initialize files if they don't exist
          for file in applications network_contacts saved_searches; do
            FILE_PATH="${{ steps.dirs.outputs.data_dir }}/${file}.json"
            if [ ! -f "$FILE_PATH" ]; then
              echo "[]" > "$FILE_PATH"
              echo "Created: $FILE_PATH"
            else
              echo "Found existing: $FILE_PATH"
            fi
          done

      - name: Add json_updater.py if missing
        run: |
          SCRIPT_PATH="${{ steps.dirs.outputs.system_dir }}/json_updater.py"
          
          if [ ! -f "$SCRIPT_PATH" ]; then
            cat > "$SCRIPT_PATH" << 'EOFPYTHON'
          #!/usr/bin/env python3
          import json
          import sys
          from pathlib import Path
          from datetime import datetime

          class JobSearchJSONUpdater:
              def __init__(self, tracking_dir="job_search"):
                  self.tracking_dir = Path(tracking_dir)
                  self.tracking_dir.mkdir(parents=True, exist_ok=True)
                  self.files = {
                      "applications": self.tracking_dir / "applications.json",
                      "contacts": self.tracking_dir / "network_contacts.json",
                      "searches": self.tracking_dir / "saved_searches.json"
                  }
                  for file_path in self.files.values():
                      if not file_path.exists():
                          self._write_json(file_path, [])

              def _read_json(self, file_path):
                  try:
                      with open(file_path, 'r') as f:
                          return json.load(f)
                  except:
                      return []

              def _write_json(self, file_path, data):
                  with open(file_path, 'w') as f:
                      json.dump(data, f, indent=2, default=str)

              def add_application(self, app_data):
                  applications = self._read_json(self.files["applications"])
                  for app in applications:
                      if app.get('company') == app_data.get('company') and \
                         app.get('position') == app_data.get('position'):
                          return {"success": False, "message": "Duplicate application"}
                  applications.append(app_data)
                  self._write_json(self.files["applications"], applications)
                  return {"success": True, "message": f"Added application to {app_data['company']}", "total": len(applications)}

              def add_contact(self, contact_data):
                  contacts = self._read_json(self.files["contacts"])
                  for contact in contacts:
                      if contact.get('name') == contact_data.get('name'):
                          return {"success": False, "message": "Duplicate contact"}
                  contacts.append(contact_data)
                  self._write_json(self.files["contacts"], contacts)
                  return {"success": True, "message": f"Added contact {contact_data['name']}", "total": len(contacts)}

              def add_search(self, search_data):
                  searches = self._read_json(self.files["searches"])
                  for search in searches:
                      if search.get('name') == search_data.get('name'):
                          return {"success": False, "message": "Duplicate search"}
                  searches.append(search_data)
                  self._write_json(self.files["searches"], searches)
                  return {"success": True, "message": f"Added search '{search_data['name']}'", "total": len(searches)}

              def process_input(self, input_json, data_type):
                  try:
                      data = json.loads(input_json)
                  except:
                      return {"success": False, "message": "Invalid JSON"}
                  
                  if data_type == "application":
                      return self.add_application(data)
                  elif data_type == "contact":
                      return self.add_contact(data)
                  elif data_type == "search":
                      return self.add_search(data)
                  else:
                      return {"success": False, "message": f"Unknown type: {data_type}"}

          if __name__ == "__main__":
              data_type = sys.argv[1]
              tracking_dir = sys.argv[2] if len(sys.argv) > 2 else "job_search"
              json_input = sys.stdin.read()
              updater = JobSearchJSONUpdater(tracking_dir)
              result = updater.process_input(json_input, data_type)
              print(json.dumps(result, indent=2))
              sys.exit(0 if result["success"] else 1)
          EOFPYTHON
            chmod +x "$SCRIPT_PATH"
            echo "Created: $SCRIPT_PATH"
          else
            echo "Found existing: $SCRIPT_PATH"
          fi    
     
      
      - name: Process JSON data
        id: process
        run: |
          python3 "${{ steps.dirs.outputs.system_dir }}/json_updater.py" \
          --type "${{ github.event.inputs.data_type }}" \
          --json '${{ github.event.inputs.json_data }}' \
          --tracking-dir "${{ steps.dirs.outputs.data_dir }}" \
          > result.json
          
          cat result.json
          
          # Extract results
          SUCCESS=$(python3 -c "import json; print(json.load(open('result.json'))['success'])")
          MESSAGE=$(python3 -c "import json; print(json.load(open('result.json'))['message'])")
         
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
      
      - name: Commit changes
        if: steps.process.outputs.success == 'True'
        run: |
          git config --global user.name "Job Search Bot"
          git config --global user.email "bot@jobsearch.local"
          
          git add "${{ steps.dirs.outputs.data_dir }}/"
          
          DATA_TYPE="${{ github.event.inputs.data_type }}"
          DATA_DIR="${{ steps.dirs.outputs.data_dir }}"
          git commit -m "Add new ${DATA_TYPE} to ${DATA_DIR} via web form - $(date +%Y-%m-%d)" || echo "No changes"
          git push
      
      - name: Create success issue
        if: steps.process.outputs.success == 'True'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python << 'EOF'
          import os
          import json
          import requests
          from datetime import datetime

          github_token = os.environ.get('GITHUB_TOKEN')
          repo = os.environ.get('GITHUB_REPOSITORY')
          data_type = "${{ github.event.inputs.data_type }}"
          data_dir = "${{ steps.dirs.outputs.data_dir }}"
          message = "${{ steps.process.outputs.message }}"
          json_data = '''${{ github.event.inputs.json_data }}'''

          # Parse the data
          try:
            parsed_data = json.loads(json_data)
    
            if data_type == "application":
              title = f"✅ Application Added: {parsed_data.get('company')} - {parsed_data.get('position')}"
              body = f"""# New Application Tracked

              **Company:** {parsed_data.get('company')}  
              **Position:** {parsed_data.get('position')}  
              **Source:** {parsed_data.get('source')}  
              **Status:** {parsed_data.get('status')}  
              **URL:** {parsed_data.get('url')}

              **Next Steps:**
              - Follow up in 7 days ({parsed_data.get('follow_up_date', 'TBD')})
              - Track response
              - Update status as needed

              ---
              *Added to `{data_dir}/` via web form on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
              """
    
           elif data_type == "contact":
             title = f"👤 Contact Added: {parsed_data.get('name')}"
             body = f"""# New Contact Added to Network

             **Name:** {parsed_data.get('name')}  
             **Company:** {parsed_data.get('company', 'N/A')}  
             **Position:** {parsed_data.get('position', 'N/A')}  
             **Relationship:** {parsed_data.get('relationship_strength')}  
             **LinkedIn:** {parsed_data.get('linkedin_url', 'N/A')}
             
             **Context:** {parsed_data.get('connection_context')}
            
             **Next Steps:**
             - Follow up in 14 days
             - Engage with their content
             - Build relationship before asking for referrals

             ---
             *Added to `{data_dir}/` via web form on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
             """
    
           elif data_type == "search":
             title = f"🔍 Saved Search Added: {parsed_data.get('name')}"
             keywords = ', '.join(parsed_data.get('keywords', []))
             boards = ', '.join(parsed_data.get('boards', []))
             body = f"""# New Saved Search Created

             **Search Name:** {parsed_data.get('name')}  
             **Keywords:** {keywords}  
             **Location:** {parsed_data.get('location') or 'Remote'}  
             **Job Boards:** {boards}  
             **Min Salary:** ${parsed_data.get('min_salary', 'N/A')}  
             **Experience:** {parsed_data.get('experience_level')}

             **Next Steps:**
             - Check search results daily
             - Adjust keywords if needed
             - Set up job alerts on each board

             ---
             *Added to `{data_dir}/` via web form on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
            """
    
           else: 
             title = f"✅ Data Added: {data_type}"
             body = f"New {data_type} added successfully to `{data_dir}/`.\n\n{message}"
    
             headers = {
             'Authorization': f'token {github_token}',
             'Accept': 'application/vnd.github.v3+json'
             }
    
           data = {
           'title': title,
           'body': body,
           'labels': ['job-search', 'form-submission', data_type]
           }
    
           response = requests.post(
           f'https://api.github.com/repos/{repo}/issues',
           headers=headers,
           json=data,
           timeout=30
           )
    
           if response.status_code == 201:
             issue = response.json()
             print(f"✅ Created issue #{issue['number']}: {title}")
           else:
              print(f"Failed to create issue: {response.status_code}")

          except Exception as e:
            print(f"Error: {e}")
           EOF
      
      - name: Comment on failure
        if: steps.process.outputs.success == 'False'
        run: |
          echo "❌ Failed to add data: ${{ steps.process.outputs.message }}"
          exit 1
