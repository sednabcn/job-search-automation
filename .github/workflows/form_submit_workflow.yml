name: Add Job Search Data via Form

on:
  workflow_dispatch:
    inputs:
      data_type:
        description: 'Type of data to add'
        required: true
        type: choice
        options:
          - application
          - company
          - interview
          - salary
          - review
      json_data:
        description: 'JSON data (paste complete JSON object - see examples in README)'
        required: true
        type: string

jobs:
  add_data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Validate and process JSON data
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          import os
          import sys
          from datetime import datetime
          import re
          
          # Get inputs
          data_type = os.environ.get('DATA_TYPE', '')
          json_data_raw = os.environ.get('JSON_DATA', '')
          
          print(f"üìä Processing {data_type} data...")
          
          # Clean the input
          json_data_raw = json_data_raw.strip()
          
          # Check if input looks like a file path
          if json_data_raw.endswith('.json') and '/' in json_data_raw:
              print(f"‚ùå ERROR: You pasted a file path, not JSON content!")
              print(f"Received: {json_data_raw}")
              print("\n" + "="*60)
              print("CORRECT FORMAT - Paste JSON like this:")
              print("="*60)
              if data_type == 'application':
                  print('''{
            "id": "company_2025",
            "company": "Example Corp",
            "position": "Software Engineer",
            "url": "https://example.com/careers/123",
            "source": "LinkedIn",
            "resume_version": "default",
            "cover_letter": true,
            "applied_date": "2025-10-20T10:00:00",
            "status": "applied",
            "notes": "Great company culture"
          }''')
              elif data_type == 'company':
                  print('''{
            "company_name": "Example Corp",
            "overall_rating": 4.2,
            "industry": "Technology",
            "size": "1000-5000",
            "headquarters": "San Francisco, CA"
          }''')
              print("="*60)
              sys.exit(1)
          
          # Try to parse JSON
          try:
              data = json.loads(json_data_raw)
              print("‚úÖ JSON parsed successfully")
              print(f"üìã Data keys: {list(data.keys())}")
          except json.JSONDecodeError as e:
              print(f"‚ùå Invalid JSON: {e}")
              print(f"\nFirst 200 chars received: {json_data_raw[:200]}")
              print("\nTip: Make sure your JSON is valid. Use a JSON validator like jsonlint.com")
              sys.exit(1)
          
          # Determine file path
          file_map = {
              'application': 'job_search/applications.json',
              'company': 'job_search/companies.json',
              'interview': 'job_search/interviews.json',
              'salary': 'job_search/salaries.json',
              'review': 'job_search/reviews.json'
          }
          
          file_path = file_map.get(data_type)
          if not file_path:
              print(f"‚ùå Unknown data type: {data_type}")
              sys.exit(1)
          
          # Ensure directory exists
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          
          # Load existing data
          existing_data = []
          if os.path.exists(file_path):
              try:
                  with open(file_path, 'r') as f:
                      content = f.read().strip()
                      if content:
                          existing_data = json.loads(content)
                  print(f"üìÇ Loaded {len(existing_data)} existing records")
              except json.JSONDecodeError as e:
                  print(f"‚ö†Ô∏è  Existing file has invalid JSON: {e}")
                  print("Starting with empty list")
                  existing_data = []
          else:
              print(f"üìÑ Creating new file: {file_path}")
          
          # Validate required fields based on type
          required_fields = {
              'application': ['company', 'position', 'status'],
              'company': ['company_name'],
              'interview': ['company_name', 'position'],
              'salary': ['company_name', 'role'],
              'review': ['company_name']
          }
          
          missing_fields = [f for f in required_fields.get(data_type, []) if f not in data]
          if missing_fields:
              print(f"‚ö†Ô∏è  Warning: Missing recommended fields: {', '.join(missing_fields)}")
          
          # Add metadata
          if 'logged_date' not in data and 'applied_date' not in data:
              data['logged_date'] = datetime.now().isoformat()
          
          # For applications, initialize timeline if not present
          if data_type == 'application' and 'timeline' not in data:
              data['timeline'] = [{
                  'date': data.get('applied_date', datetime.now().isoformat()),
                  'event': data.get('status', 'applied'),
                  'notes': 'Initial application submitted'
              }]
          
          # Add the new data
          existing_data.append(data)
          
          # Write back to file with proper formatting
          with open(file_path, 'w') as f:
              json.dump(existing_data, f, indent=2)
          
          print(f"‚úÖ Successfully added {data_type} to {file_path}")
          print(f"üìä Total records: {len(existing_data)}")
          
          # Create summary for commit message
          summary_parts = []
          if data_type == 'application':
              summary_parts.append(f"{data.get('company', 'Unknown')} - {data.get('position', 'Unknown')}")
          elif data_type == 'company':
              summary_parts.append(data.get('company_name', 'Unknown'))
              if data.get('overall_rating'):
                  summary_parts.append(f"({data['overall_rating']}/5.0)")
          elif data_type == 'interview':
              summary_parts.append(f"{data.get('company_name', 'Unknown')} - {data.get('position', 'Unknown')}")
          elif data_type == 'salary':
              summary_parts.append(f"{data.get('company_name', 'Unknown')} - {data.get('role', 'Unknown')}")
              if data.get('total_comp_avg'):
                  summary_parts.append(f"${data['total_comp_avg']:,.0f}")
          elif data_type == 'review':
              summary_parts.append(data.get('company_name', 'Unknown'))
          
          summary = ' '.join(summary_parts)
          
          with open('add_summary.txt', 'w') as f:
              f.write(summary)
          
          # Create detailed report
          with open('add_details.txt', 'w') as f:
              f.write(f"Type: {data_type}\n")
              f.write(f"Summary: {summary}\n")
              f.write(f"Total records: {len(existing_data)}\n")
              f.write(f"\nData added:\n")
              f.write(json.dumps(data, indent=2))
          
          print("\n‚úÖ All done!")
          
          PYTHON_SCRIPT
        env:
          DATA_TYPE: ${{ github.event.inputs.data_type }}
          JSON_DATA: ${{ github.event.inputs.json_data }}
      
      - name: Commit changes
        id: commit
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Read summary
          SUMMARY="data updated"
          if [ -f "add_summary.txt" ]; then
            SUMMARY=$(cat add_summary.txt)
          fi
          
          git add job_search/*.json
          
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "‚ûï Add ${{ github.event.inputs.data_type }}: $SUMMARY"
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
          fi
      
      - name: Push changes
        if: steps.commit.outputs.changes == 'true'
        run: |
          git push
      
      - name: Create success notification
        if: success() && steps.commit.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let details = 'Data added successfully';
            if (fs.existsSync('add_details.txt')) {
              details = fs.readFileSync('add_details.txt', 'utf8');
            }
            
            const summary = '${{ steps.commit.outputs.summary }}' || 'Data added';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚úÖ Added ${{ github.event.inputs.data_type }}: ${summary}`,
              body: `## Data Added Successfully\n\n\`\`\`\n${details}\n\`\`\`\n\n**Added by:** @${context.actor}\n**Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['data-update', 'automated']
            });
      
      - name: Create failure notification
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ùå Failed to add ${{ github.event.inputs.data_type }} data',
              body: `## Data Addition Failed\n\n**Type:** ${{ github.event.inputs.data_type }}\n\n**Common Issues:**\n- Did you paste a file path instead of JSON content?\n- Is your JSON valid? Test it at jsonlint.com\n- Are required fields included?\n\n**Triggered by:** @${context.actor}\n**Check logs:** [Run #${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['error', 'data-update']
            });
