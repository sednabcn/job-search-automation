name: Glassdoor Research Automation

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  
  workflow_dispatch:
    inputs:
      company_name:
        description: 'Company to research (optional)'
        required: false
        type: string
      export_reports:
        description: 'Export reports after research'
        required: false
        type: boolean
        default: true

  push:
    branches:
      - main
    paths:
      - 'job_search/**'
      - '.github/scripts/**'
      - '.github/workflows/glassdoor_automation.yml'

jobs:
  research_automation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found, installing defaults"
          pip install requests || true
      
      - name: Verify Python modules exist
        run: |
          echo "üìÅ Checking for required Python modules..."
          
          # Check if modules exist in .github/scripts
          if [ ! -f ".github/scripts/glassdoor_automation.py" ]; then
            echo "‚ùå glassdoor_automation.py not found in .github/scripts/"
            echo "Please add glassdoor_automation.py to .github/scripts/"
            exit 1
          else
            echo "‚úÖ Found glassdoor_automation.py in .github/scripts/"
          fi
          
          if [ ! -f ".github/scripts/glassdoor_enhanced.py" ]; then
            echo "‚ö†Ô∏è  glassdoor_enhanced.py not found in .github/scripts/"
          else
            echo "‚úÖ Found glassdoor_enhanced.py in .github/scripts/"
          fi
          
          echo "‚úÖ Module check complete"
      
      - name: Run daily research tasks
        id: research
        run: |
          python3 << 'PYTHON_SCRIPT'
          import sys
          import os
          import json
          
          # Add .github/scripts to Python path
          sys.path.insert(0, '.github/scripts')
          
          try:
              from glassdoor_automation import GlassdoorAutomation
              print("‚úÖ Imported GlassdoorAutomation")
          except ImportError as e:
              print(f"‚ùå Failed to import GlassdoorAutomation: {e}")
              sys.exit(1)
          
          try:
              from glassdoor_enhanced import GlassdoorEnhanced
              print("‚úÖ Imported GlassdoorEnhanced")
              has_enhanced = True
          except ImportError:
              print("‚ö†Ô∏è  GlassdoorEnhanced not available, using basic features only")
              has_enhanced = False
          
          # Initialize
          gd = GlassdoorAutomation()
          
          if has_enhanced:
              enhanced = GlassdoorEnhanced(gd)
          
          # Get daily tasks
          tasks = gd.get_daily_research_tasks()
          print('\nüìã Daily Research Tasks:')
          print(json.dumps(tasks, indent=2))
          
          # Check for high priority items
          high_priority_count = len(tasks.get('high_priority', []))
          print(f'\nüî¥ High priority tasks: {high_priority_count}')
          
          # Write to GitHub Actions output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'high_priority={high_priority_count}\n')
          
          # Export summary
          if tasks['high_priority'] or tasks['medium_priority']:
              with open('daily_tasks_summary.txt', 'w') as f:
                  f.write(f'High Priority: {len(tasks["high_priority"])}\n')
                  f.write(f'Medium Priority: {len(tasks["medium_priority"])}\n')
                  f.write(f'Follow-ups: {len(tasks["follow_ups"])}\n')
                  
                  if tasks['high_priority']:
                      f.write('\n=== High Priority Tasks ===\n')
                      for task in tasks['high_priority']:
                          f.write(f"- {task['company_name']}: {task['reason']}\n")
                          f.write(f"  Progress: {task['progress']}\n")
                          f.write(f"  Incomplete: {', '.join(task['incomplete_items'])}\n\n")
          
          print("‚úÖ Daily research tasks completed")
          PYTHON_SCRIPT
      
      - name: Research specific company (if provided)
        if: github.event.inputs.company_name != ''
        run: |
          python3 << 'PYTHON_SCRIPT'
          import sys
          sys.path.insert(0, '.github/scripts')
          
          from glassdoor_automation import GlassdoorAutomation
          
          try:
              from glassdoor_enhanced import GlassdoorEnhanced
              has_enhanced = True
          except ImportError:
              has_enhanced = False
          
          company = '${{ github.event.inputs.company_name }}'
          
          gd = GlassdoorAutomation()
          
          # Generate report
          print(f"\nüìä Generating report for {company}...\n")
          report = gd.generate_full_research_report(company)
          print(report)
          
          # Export report if enhanced features available
          if has_enhanced:
              enhanced = GlassdoorEnhanced(gd)
              result = enhanced.export_full_report_markdown(company)
              print(f'\nüìÑ {result}')
          else:
              # Save report manually
              import os
              os.makedirs('job_search/exports', exist_ok=True)
              filename = f"job_search/exports/{company.replace(' ', '_')}_report.md"
              with open(filename, 'w') as f:
                  f.write(report)
              print(f"üìÑ Exported report to {filename}")
          
          print("‚úÖ Company research completed")
          PYTHON_SCRIPT
      
      - name: Export all reports
        if: github.event.inputs.export_reports == 'true' || github.event_name == 'schedule'
        run: |
          python3 << 'PYTHON_SCRIPT'
          import sys
          import json
          
          sys.path.insert(0, '.github/scripts')
          
          from glassdoor_automation import GlassdoorAutomation
          
          try:
              from glassdoor_enhanced import GlassdoorEnhanced
              has_enhanced = True
          except ImportError:
              has_enhanced = False
          
          gd = GlassdoorAutomation()
          
          if has_enhanced:
              enhanced = GlassdoorEnhanced(gd)
              
              # Export all data
              print("üì¶ Exporting all data...")
              results = enhanced.export_all_data()
              print('Export Results:')
              print(json.dumps(results, indent=2))
          else:
              print("‚ö†Ô∏è  Enhanced export features not available")
              print(f"Companies tracked: {len(gd.companies)}")
              print(f"Salary data points: {len(gd.salaries)}")
              print(f"Interview records: {len(gd.interviews)}")
          
          print("‚úÖ Export completed")
          PYTHON_SCRIPT
      
      - name: Generate monitoring report
        run: |
          python3 << 'PYTHON_SCRIPT'
          import sys
          from datetime import datetime
          
          sys.path.insert(0, '.github/scripts')
          
          from glassdoor_automation import GlassdoorAutomation
          
          gd = GlassdoorAutomation()
          
          # Generate monitoring stats
          stats = {
              'timestamp': datetime.now().isoformat(),
              'total_companies': len(gd.companies),
              'total_salaries': len(gd.salaries),
              'total_interviews': len(gd.interviews),
              'total_reviews': len(gd.reviews),
              'research_queue': len(gd.research_queue)
          }
          
          with open('monitoring_report.txt', 'w') as f:
              f.write('=== Glassdoor Research Monitoring ===\n')
              f.write(f'Generated: {stats["timestamp"]}\n\n')
              f.write(f'Companies Tracked: {stats["total_companies"]}\n')
              f.write(f'Salary Data Points: {stats["total_salaries"]}\n')
              f.write(f'Interview Records: {stats["total_interviews"]}\n')
              f.write(f'Employee Reviews: {stats["total_reviews"]}\n')
              f.write(f'Items in Queue: {stats["research_queue"]}\n')
          
          print("‚úÖ Monitoring report generated")
          PYTHON_SCRIPT
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: glassdoor-reports-${{ github.run_number }}
          path: |
            job_search/exports/
            monitoring_report.txt
            daily_tasks_summary.txt
          retention-days: 30
      
      - name: Commit updated data
        id: commit
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add job_search/*.json || true
          git add job_search/exports/*.csv job_search/exports/*.md || true
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "ü§ñ Automated research update - $(date +'%Y-%m-%d %H:%M')"
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Push changes
        if: steps.commit.outputs.changes == 'true'
        run: |
          git push
      
      - name: Create issue for high priority tasks
        if: steps.research.outputs.high_priority > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let summary = '## Daily Research Alert\n\nNo summary available';
            
            if (fs.existsSync('daily_tasks_summary.txt')) {
              summary = fs.readFileSync('daily_tasks_summary.txt', 'utf8');
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è High Priority Research Tasks Pending',
              body: `## Daily Research Alert\n\n${summary}\n\nPlease review and complete high priority research tasks.`,
              labels: ['research', 'high-priority']
            });
  
  weekly_analysis:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * 1'  # Monday only
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Generate weekly summary
        run: |
          python3 << 'PYTHON_SCRIPT'
          import sys
          from datetime import datetime, timedelta
          
          sys.path.insert(0, '.github/scripts')
          
          from glassdoor_automation import GlassdoorAutomation
          
          gd = GlassdoorAutomation()
          
          # Generate weekly report
          week_ago = (datetime.now() - timedelta(days=7)).isoformat()
          
          recent_companies = [c for c in gd.companies if c.get('last_updated', '') >= week_ago]
          recent_salaries = [s for s in gd.salaries if s.get('logged_date', '') >= week_ago]
          recent_interviews = [i for i in gd.interviews if i.get('logged_date', '') >= week_ago]
          
          with open('weekly_summary.md', 'w') as f:
              f.write('# üìä Weekly Glassdoor Research Summary\n\n')
              f.write(f'**Period:** {week_ago[:10]} to {datetime.now().strftime("%Y-%m-%d")}\n\n')
              f.write(f'## Activity This Week\n\n')
              f.write(f'- üè¢ Companies Updated: {len(recent_companies)}\n')
              f.write(f'- üí∞ New Salary Data: {len(recent_salaries)}\n')
              f.write(f'- üíº New Interview Data: {len(recent_interviews)}\n\n')
              
              if recent_companies:
                  f.write('## Updated Companies\n\n')
                  for company in recent_companies:
                      f.write(f'- {company["company_name"]}')
                      if company.get('overall_rating'):
                          f.write(f' ({company["overall_rating"]}/5.0)')
                      f.write('\n')
              
              # Find best new opportunities
              if recent_salaries:
                  f.write('\n## üíé Top Salary Opportunities\n\n')
                  sorted_salaries = sorted(recent_salaries, key=lambda x: x.get('total_comp_avg', 0), reverse=True)[:5]
                  for salary in sorted_salaries:
                      f.write(f'- {salary["company_name"]} - {salary["role"]}: ${salary.get("total_comp_avg", 0):,.0f}\n')
          
          print("‚úÖ Weekly summary generated")
          PYTHON_SCRIPT
      
      - name: Upload weekly summary
        uses: actions/upload-artifact@v4
        with:
          name: weekly-summary-${{ github.run_number }}
          path: weekly_summary.md
          retention-days: 90
      
      - name: Create weekly summary issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('weekly_summary.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìä Weekly Glassdoor Research Summary',
              body: summary,
              labels: ['weekly-report', 'research']
            });

  data_quality_check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Run data quality checks
        run: |
          python3 << 'PYTHON_SCRIPT'
          import sys
          
          sys.path.insert(0, '.github/scripts')
          
          from glassdoor_automation import GlassdoorAutomation
          
          gd = GlassdoorAutomation()
          
          issues = []
          
          # Check for companies without key data
          for company in gd.companies:
              company_name = company['company_name']
              
              # Check for missing ratings
              if not company.get('overall_rating'):
                  issues.append(f'‚ö†Ô∏è {company_name}: Missing overall rating')
              
              # Check for salary data
              salaries = [s for s in gd.salaries if s['company_name'] == company_name]
              if not salaries:
                  issues.append(f'üí∞ {company_name}: No salary data')
              
              # Check for interview data
              interviews = [i for i in gd.interviews if i['company_name'] == company_name]
              if not interviews:
                  issues.append(f'üíº {company_name}: No interview data')
              
              # Check for reviews
              reviews = [r for r in gd.reviews if r['company_name'] == company_name]
              if not reviews:
                  issues.append(f'‚≠ê {company_name}: No reviews')
          
          # Write quality report
          with open('data_quality_report.txt', 'w') as f:
              f.write('=== Data Quality Report ===\n\n')
              if issues:
                  f.write(f'Found {len(issues)} potential issues:\n\n')
                  for issue in issues:
                      f.write(f'{issue}\n')
              else:
                  f.write('‚úÖ All data quality checks passed!\n')
          
          # Print to console
          with open('data_quality_report.txt', 'r') as f:
              print(f.read())
          
          print("\n‚úÖ Data quality check completed")
          PYTHON_SCRIPT
      
      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: data-quality-report
          path: data_quality_report.txt
          retention-days: 30
