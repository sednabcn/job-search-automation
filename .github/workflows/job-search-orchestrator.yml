name: Job Search Orchestrator

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  
  workflow_dispatch:
    inputs:
      pipeline_mode:
        description: 'Pipeline execution mode'
        required: true
        type: choice
        options:
          - full_pipeline      # Discovery ‚Üí Match ‚Üí Email
          - discovery_only     # Just discover jobs
          - match_only         # Just match existing jobs
          - manual_entry       # Open form submission
          - maintenance        # Cleanup old data
        default: 'full_pipeline'
      
      discovery_mode:
        description: 'Discovery mode (if supported by job-discovery-worker.yml)'
        required: false
        type: choice
        options:
          - full
          - incremental
          - test
        default: 'full'
      
      data_directory:
        description: 'Data directory path'
        required: false
        type: string
        default: 'job_search'
      
      send_emails:
        description: 'Send email notifications'
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: '3.10'
  DATA_DIR: ${{ github.event.inputs.data_directory || 'job_search' }}

jobs:
  # ========================================
  # STAGE 0: PIPELINE COORDINATOR
  # ========================================
  coordinator:
    name: Pipeline Coordinator
    runs-on: ubuntu-latest
    outputs:
      run_discovery: ${{ steps.plan.outputs.run_discovery }}
      run_matching: ${{ steps.plan.outputs.run_matching }}
      run_emails: ${{ steps.plan.outputs.run_emails }}
      run_maintenance: ${{ steps.plan.outputs.run_maintenance }}
      pipeline_id: ${{ steps.setup.outputs.pipeline_id }}
      timestamp: ${{ steps.setup.outputs.timestamp }}
    
    steps:
      - name: Setup Pipeline Context
        id: setup
        run: |
          PIPELINE_ID="pipeline-$(date +%Y%m%d-%H%M%S)"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          
          echo "üöÄ Job Search Pipeline Orchestrator"
          echo "Pipeline ID: $PIPELINE_ID"
          echo "Mode: ${{ github.event.inputs.pipeline_mode || 'full_pipeline' }}"
      
      - name: Determine Execution Plan
        id: plan
        run: |
          MODE="${{ github.event.inputs.pipeline_mode }}"
          
          # Default for scheduled runs
          if [ -z "$MODE" ]; then
            MODE="full_pipeline"
          fi
          
          case "$MODE" in
            full_pipeline)
              echo "run_discovery=true" >> $GITHUB_OUTPUT
              echo "run_matching=true" >> $GITHUB_OUTPUT
              echo "run_emails=true" >> $GITHUB_OUTPUT
              echo "run_maintenance=false" >> $GITHUB_OUTPUT
              echo "üìã Plan: Full pipeline (Discover ‚Üí Match ‚Üí Email)"
              ;;
            discovery_only)
              echo "run_discovery=true" >> $GITHUB_OUTPUT
              echo "run_matching=false" >> $GITHUB_OUTPUT
              echo "run_emails=false" >> $GITHUB_OUTPUT
              echo "run_maintenance=false" >> $GITHUB_OUTPUT
              echo "üìã Plan: Discovery only"
              ;;
            match_only)
              echo "run_discovery=false" >> $GITHUB_OUTPUT
              echo "run_matching=true" >> $GITHUB_OUTPUT
              echo "run_emails=true" >> $GITHUB_OUTPUT
              echo "run_maintenance=false" >> $GITHUB_OUTPUT
              echo "üìã Plan: Matching only"
              ;;
            manual_entry)
              echo "run_discovery=false" >> $GITHUB_OUTPUT
              echo "run_matching=false" >> $GITHUB_OUTPUT
              echo "run_emails=false" >> $GITHUB_OUTPUT
              echo "run_maintenance=false" >> $GITHUB_OUTPUT
              echo "üìã Plan: Manual entry (use form_submit_workflow.yml)"
              ;;
            maintenance)
              echo "run_discovery=false" >> $GITHUB_OUTPUT
              echo "run_matching=false" >> $GITHUB_OUTPUT
              echo "run_emails=false" >> $GITHUB_OUTPUT
              echo "run_maintenance=true" >> $GITHUB_OUTPUT
              echo "üìã Plan: Maintenance only"
              ;;
            *)
              echo "‚ùå Unknown mode: $MODE"
              exit 1
              ;;
          esac

  # ========================================
  # STAGE 1: JOB DISCOVERY
  # ========================================
  trigger-discovery:
    name: Trigger Job Discovery
    runs-on: ubuntu-latest
    needs: coordinator
    if: needs.coordinator.outputs.run_discovery == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Trigger Job Discovery Workflow
        run: |
          echo "üîç Triggering job discovery workflow..."
          
          # Trigger without any inputs - let the workflow use its defaults
          # If job-discovery-worker.yml requires specific inputs, uncomment and adjust:
          # MODE="${{ github.event.inputs.discovery_mode || 'full' }}"
          # gh workflow run job-discovery-worker.yml -f mode="$MODE"
          
          gh workflow run job-discovery-worker.yml
          
          echo "‚úÖ Discovery workflow triggered"
          echo "‚ÑπÔ∏è  Using job-discovery-worker.yml default configuration"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for Discovery Completion
        run: |
          echo "‚è≥ Waiting for discovery workflow to complete..."
          sleep 30
          
          # Check last workflow run status
          echo "üìä Recent discovery workflow runs:"
          gh run list --workflow=job-discovery-worker.yml --limit=3 --json status,conclusion,createdAt,displayTitle \
            --jq '.[] | "\(.createdAt) - \(.displayTitle) - \(.status) - \(.conclusion // "pending")"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # STAGE 2: KEYWORD EXTRACTION & CONFIG UPDATE
  # ========================================
  trigger-keyword-extraction:
    name: Trigger Keyword Extraction
    runs-on: ubuntu-latest
    needs: [coordinator, trigger-discovery]
    if: |
      needs.coordinator.outputs.run_discovery == 'true' &&
      needs.trigger-discovery.result == 'success'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Trigger Keyword Extraction
        run: |
          echo "üîë Triggering keyword extraction and config update..."
          
          # Trigger without inputs if they're not supported
          # Uncomment and adjust if specific inputs are needed:
          # gh workflow run job-manager-center-multiplatform.yml \
          #   -f update_config=true \
          #   -f trigger_discovery=false
          
          gh workflow run job-manager-center-multiplatform.yml
          
          echo "‚úÖ Keyword extraction workflow triggered"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for Config Update
        run: |
          echo "‚è≥ Waiting for config update..."
          sleep 20

  # ========================================
  # STAGE 3: CV MATCHING
  # ========================================
  trigger-matching:
    name: Trigger CV Matching
    runs-on: ubuntu-latest
    needs: [coordinator, trigger-discovery]
    if: |
      always() &&
      needs.coordinator.outputs.run_matching == 'true' &&
      (needs.trigger-discovery.result == 'success' || needs.coordinator.outputs.run_discovery == 'false')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Trigger CV Matcher
        run: |
          echo "üéØ Triggering CV matching..."
          
          # Trigger without inputs - let cv_job_matcher.yml use its defaults
          # If specific inputs are supported, uncomment and adjust:
          # gh workflow run cv_job_matcher.yml -f threshold="75"
          
          gh workflow run cv_job_matcher.yml
          
          echo "‚úÖ CV matching workflow triggered"
          echo "‚ÑπÔ∏è  Using cv_job_matcher.yml default configuration"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for Matching Completion
        run: |
          echo "‚è≥ Waiting for matching to complete..."
          sleep 30
          
          echo "üìä Recent CV matcher workflow runs:"
          gh run list --workflow=cv_job_matcher.yml --limit=3 --json status,conclusion,createdAt \
            --jq '.[] | "\(.createdAt) - \(.status) - \(.conclusion // "pending")"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # STAGE 4: EMAIL NOTIFICATIONS
  # ========================================
  trigger-emails:
    name: Send Email Notifications
    runs-on: ubuntu-latest
    needs: [coordinator, trigger-matching]
    if: |
      always() &&
      needs.coordinator.outputs.run_emails == 'true' &&
      needs.trigger-matching.result == 'success' &&
      github.event.inputs.send_emails != 'false'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Trigger Email Sender
        run: |
          echo "üìß Triggering email notifications..."
          
          gh workflow run send-cv-match-emails.yml
          
          echo "‚úÖ Email workflow triggered"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for Email Completion
        run: |
          echo "‚è≥ Waiting for emails to send..."
          sleep 20
          
          echo "üìä Recent email workflow runs:"
          gh run list --workflow=send-cv-match-emails.yml --limit=3 --json status,conclusion,createdAt \
            --jq '.[] | "\(.createdAt) - \(.status) - \(.conclusion // "pending")"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # STAGE 5: MAINTENANCE
  # ========================================
  trigger-maintenance:
    name: Run Maintenance
    runs-on: ubuntu-latest
    needs: coordinator
    if: needs.coordinator.outputs.run_maintenance == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Trigger Cleanup
        run: |
          echo "üßπ Triggering maintenance cleanup..."
          
          gh workflow run cleanup-old-workflows.yml
          
          echo "‚úÖ Cleanup workflow triggered"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # STAGE 6: MONITORING & REPORTING
  # ========================================
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [coordinator, trigger-discovery, trigger-matching, trigger-emails]
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Generate Pipeline Report
        run: |
          python3 << 'EOF'
          import json
          from datetime import datetime
          
          print("\n" + "="*80)
          print("JOB SEARCH PIPELINE SUMMARY")
          print("="*80)
          print(f"\nüìä Pipeline ID: ${{ needs.coordinator.outputs.pipeline_id }}")
          print(f"‚è∞ Timestamp: ${{ needs.coordinator.outputs.timestamp }}")
          print(f"üéØ Mode: ${{ github.event.inputs.pipeline_mode || 'full_pipeline' }}")
          
          print("\nüìà STAGE RESULTS:")
          print(f"  Discovery:    ${{ needs.trigger-discovery.result || 'skipped' }}")
          print(f"  Matching:     ${{ needs.trigger-matching.result || 'skipped' }}")
          print(f"  Emails:       ${{ needs.trigger-emails.result || 'skipped' }}")
          
          print("\nüíæ DATA DIRECTORY: ${{ env.DATA_DIR }}")
          print("\n‚ÑπÔ∏è  NOTE: All workflows triggered with their default configurations")
          print("="*80)
          EOF
      
      - name: Create Summary Issue
        if: |
          github.event_name == 'schedule' ||
          github.event.inputs.pipeline_mode == 'full_pipeline'
        uses: actions/github-script@v7
        with:
          script: |
            const pipelineId = '${{ needs.coordinator.outputs.pipeline_id }}';
            const timestamp = '${{ needs.coordinator.outputs.timestamp }}';
            const mode = '${{ github.event.inputs.pipeline_mode || 'full_pipeline' }}';
            
            const discoveryResult = '${{ needs.trigger-discovery.result || 'skipped' }}';
            const matchingResult = '${{ needs.trigger-matching.result || 'skipped' }}';
            const emailsResult = '${{ needs.trigger-emails.result || 'skipped' }}';
            
            const statusEmoji = {
              'success': '‚úÖ',
              'failure': '‚ùå',
              'skipped': '‚è≠Ô∏è'
            };
            
            const body = `# Job Search Pipeline Summary
            
            **Pipeline ID:** ${pipelineId}  
            **Timestamp:** ${timestamp}  
            **Mode:** ${mode}
            
            ## Stage Results
            
            | Stage | Status |
            |-------|--------|
            | Discovery | ${statusEmoji[discoveryResult]} ${discoveryResult} |
            | Matching | ${statusEmoji[matchingResult]} ${matchingResult} |
            | Emails | ${statusEmoji[emailsResult]} ${emailsResult} |
            
            ## Workflow Links
            
            - [Job Discovery](${{ github.server_url }}/${{ github.repository }}/actions/workflows/job-discovery-worker.yml)
            - [CV Matcher](${{ github.server_url }}/${{ github.repository }}/actions/workflows/cv_job_matcher.yml)
            - [Email Sender](${{ github.server_url }}/${{ github.repository }}/actions/workflows/send-cv-match-emails.yml)
            
            ## Configuration Note
            
            All workflows were triggered with their default configurations.  
            To customize behavior, configure each workflow directly.
            
            ---
            [View This Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìä Pipeline Summary - ${pipelineId}`,
              body: body,
              labels: ['job-search', 'pipeline-summary', 'automated']
            });
      
      - name: Send Slack Notification
        if: vars.SLACK_WEBHOOK_URL != ''
        run: |
          python3 << 'EOF'
          import requests
          import json
          
          webhook_url = "${{ vars.SLACK_WEBHOOK_URL }}"
          
          discovery = "${{ needs.trigger-discovery.result || 'skipped' }}"
          matching = "${{ needs.trigger-matching.result || 'skipped' }}"
          emails = "${{ needs.trigger-emails.result || 'skipped' }}"
          
          status_emoji = {
              'success': '‚úÖ',
              'failure': '‚ùå',
              'skipped': '‚è≠Ô∏è'
          }
          
          message = {
              "text": "ü§ñ Job Search Pipeline Complete",
              "blocks": [
                  {
                      "type": "header",
                      "text": {
                          "type": "plain_text",
                          "text": "ü§ñ Job Search Pipeline Summary"
                      }
                  },
                  {
                      "type": "section",
                      "fields": [
                          {
                              "type": "mrkdwn",
                              "text": f"*Pipeline ID:*\n${{ needs.coordinator.outputs.pipeline_id }}"
                          },
                          {
                              "type": "mrkdwn",
                              "text": f"*Mode:*\n${{ github.event.inputs.pipeline_mode || 'full_pipeline' }}"
                          }
                      ]
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": f"*Results:*\n{status_emoji[discovery]} Discovery\n{status_emoji[matching]} Matching\n{status_emoji[emails]} Emails"
                      }
                  }
              ]
          }
          
          if webhook_url:
              response = requests.post(webhook_url, json=message)
              print(f"Notification sent: {response.status_code}")
          EOF
