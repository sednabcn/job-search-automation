name: Send CV Match Emails

permissions:
  actions: read        # To read workflow run data
  contents: read
  
on:
  workflow_run:
    workflows: ["CV Job Matcher - Enhanced Automation"]
    types:
      - completed

jobs:
  send-emails:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
       - name: Download artifacts from previous workflow
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            
            const matchArtifact = artifacts.data.artifacts.find(artifact => 
              artifact.name === "job-match-reports"
            );
            
            if (!matchArtifact) {
              core.setFailed('No job-match-reports artifact found');
              return;
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            
            const fs = require('fs');
            fs.writeFileSync('artifact.zip', Buffer.from(download.data));
            
            console.log(`Downloaded artifact: ${matchArtifact.name}`);
      
      - name: Extract downloaded artifacts
        run: |
          unzip -q artifact.zip -d .
          ls -la
          echo "Artifacts extracted successfully"
      
      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check for queued emails
        id: check_queue
        run: |
          if [ -d "github_actions_emails" ] && [ "$(ls -A github_actions_emails 2>/dev/null)" ]; then
            echo "emails_exist=true" >> $GITHUB_OUTPUT
            email_count=$(find github_actions_emails -name "*.json" | wc -l)
            echo "email_count=$email_count" >> $GITHUB_OUTPUT
            echo "Found $email_count queued emails"
          else
            echo "emails_exist=false" >> $GITHUB_OUTPUT
            echo "email_count=0" >> $GITHUB_OUTPUT
            echo "No queued emails found"
          fi

      - name: Send summary email (if queued emails exist)
        if: steps.check_queue.outputs.emails_exist == 'true'
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
          server_port: ${{ secrets.SMTP_PORT || '587' }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "CV Job Match Analysis Complete ðŸŽ¯"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.SMTP_USER }}
          html_body: file://job_match_email.html
          attachments: |
            reports/*.txt
            reports/*.json
          ignore_cert: true
          convert_markdown: true

      - name: Send individual emails
        if: steps.check_queue.outputs.emails_exist == 'true'
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          EMAIL_USERNAME: ${{ secrets.SMTP_USER }}
          EMAIL_PASSWORD: ${{ secrets.SMTP_PASS }}
        run: |
          echo "Sending ${{ steps.check_queue.outputs.email_count }} individual emails..."

          for email_file in github_actions_emails/*.json; do
            if [ -f "$email_file" ]; then
              echo "Processing: $email_file"

              recipient=$(jq -r '.to' "$email_file")
              subject=$(jq -r '.subject' "$email_file")
              body_file=$(jq -r '.body_file' "$email_file")
              attachments=$(jq -r '.attachments | join(" ")' "$email_file")

              echo "Sending to: $recipient â€” Subject: $subject"

              docker run --rm \
                -e MAIL_USERNAME="${SMTP_USER}" \
                -e MAIL_PASSWORD="${SMTP_PASS}" \
                -v "$(pwd)":/data \
                dawidd6/action-send-mail \
                  --server-address "${SMTP_SERVER:-smtp.gmail.com}" \
                  --server-port "${SMTP_PORT:-587}" \
                  --username "${SMTP_USER}" \
                  --password "${SMTP_PASS}" \
                  --subject "$subject" \
                  --to "$recipient" \
                  --from "${SMTP_USER}" \
                  --html-body "file://$body_file" \
                  --attachments $attachments \
                  --ignore-cert \
                  --convert-markdown
            fi
          done
