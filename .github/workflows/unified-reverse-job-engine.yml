name: Reverse-Engine Job Search - Complete Automation
# ===============================================================
# üöÄ UNIFIED REVERSE JOB ENGINE ‚Äî USAGE & CONTRIBUTION GUIDE
# ===============================================================
#
# üß≠ USAGE GUIDE
# ---------------------------------------------------------------
# 1Ô∏è‚É£ INITIAL SETUP
#    ‚Ä¢ Place your CV file here:
#         data/my_cv.txt
#    ‚Ä¢ Place your target job description here:
#         data/target_job.txt
#
# 2Ô∏è‚É£ FILE FORMAT
#    ‚Ä¢ The engine supports multiple formats:
#         ‚úÖ .txt  - Plain text files
#         ‚úÖ .pdf  - PDF documents
#         ‚úÖ .docx - Microsoft Word documents
#    ‚Ä¢ Simply place your files in the data/ directory:
#         data/my_cv.pdf
#         data/target_job.docx
#
# 3Ô∏è‚É£ WORKFLOW EXECUTION
#    ‚Ä¢ Trigger this workflow manually from the ‚ÄúActions‚Äù tab
#      or by committing updates to your data files.
#    ‚Ä¢ The job automatically runs the analysis script:
#         python_advanced_job_engine.py
#
# 4Ô∏è‚É£ OUTPUT
#    ‚Ä¢ Processed results and analysis reports will be saved
#      in the output directory defined by the script.
#
# 5Ô∏è‚É£ SECRETS
#    ‚Ä¢ This workflow does NOT require any secrets or tokens.
#      It operates fully locally on the repository data.
#
# ===============================================================
# üß© NOTES FOR CONTRIBUTORS
# ---------------------------------------------------------------
#
# üîß PURPOSE
#    Automates CV‚Äìjob text analysis using Python to identify
#    matches, keywords, and recommendations.
#
# üß± STRUCTURE OVERVIEW
#    ‚îú‚îÄ‚îÄ data/
#    ‚îÇ     ‚îú‚îÄ‚îÄ my_cv.txt            # Candidate CV (plain text)
#    ‚îÇ     ‚îî‚îÄ‚îÄ target_job.txt       # Target job description (plain text)
#    ‚îú‚îÄ‚îÄ scripts/
#    ‚îÇ     ‚îî‚îÄ‚îÄ python_advanced_job_engine.py
#    ‚îî‚îÄ‚îÄ .github/workflows/
#          ‚îî‚îÄ‚îÄ unified-reverse-job-engine.yml
#
# üß† HOW TO EXTEND FUNCTIONALITY
#    1Ô∏è‚É£ Add Support for DOCX or PDF:
#        ‚Ä¢ Edit python_advanced_job_engine.py:
#             from docx import Document          # for .docx
#             import PyPDF2                      # for .pdf
#        ‚Ä¢ Update YAML defaults:
#             cv_path: 'data/my_cv.docx'
#             job_path: 'data/target_job.pdf'
#
#    2Ô∏è‚É£ Integrate APIs (Optional):
#        ‚Ä¢ To use external AI or NLP services, add secrets under:
#             Settings ‚Üí Secrets ‚Üí Actions
#        ‚Ä¢ Example secrets:
#             OPENAI_API_KEY
#             HF_TOKEN
#        ‚Ä¢ Reference them in YAML:
#             env:
#               OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
#
#    3Ô∏è‚É£ Modify Output Storage:
#        ‚Ä¢ Adjust output path inside python_advanced_job_engine.py
#
#    4Ô∏è‚É£ Logging and Debugging:
#        ‚Ä¢ Use GitHub Actions logs to inspect runtime details.
#        ‚Ä¢ Add ‚Äúset -x‚Äù in shell steps for step tracing.
#
# ===============================================================

on:
  schedule:
    - cron: '0 9,21 * * *'  # 9 AM and 9 PM daily
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - daily_report
          - start_sprint
          - end_sprint
          - quality_check
          - full_analysis
      cv_path:
        description: 'Path to CV file (.txt, .pdf, .docx)'
        required: false
        default: 'data/my_cv.pdf'
      job_path:
        description: 'Path to job description (.txt, .pdf, .docx)'
        required: false
        default: 'data/target_job.pdf'
  
env:
  PYTHON_VERSION: '3.9'
  ENGINE_SCRIPT: 'python_advanced_job_engine.py'
  DATA_DIR: 'job_search_data'
  TARGET_SCORE: 90

jobs:
  reverse_engine_workflow:
    name: Reverse-Engine Job Search Automation
    runs-on: ubuntu-latest
    
    steps:
      # =====================================================================
      # SETUP
      # =====================================================================
      
      - name: üì• Checkout repository
        uses: actions/checkout@v3
      
      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          # Add any additional dependencies if needed
          pip install python-dateutil
          pip install PyPDF2 python-docx
          echo "‚úÖ Installed: python-dateutil, PyPDF2, python-docx"
      
      - name: üìÇ Ensure data directories exist
        run: |
          mkdir -p ${{ env.DATA_DIR }}
          mkdir -p data
          echo "‚úÖ Data directories created"
      
      # =====================================================================
      # LOAD ENGINE AND STATE
      # =====================================================================
      
      - name: üîß Initialize Engine
        id: init_engine
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          
          # Import the engine
          from python_advanced_job_engine import AdvancedJobEngine
          
          # Initialize engine
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          
          # Get current state
          state = engine.state
          current_score = state.get('current_score', 0)
          baseline_score = state.get('baseline_score', 0)
          current_sprint = state.get('current_sprint', 0)
          mode = state.get('mode', 'none')
          
          print(f"current_score={current_score}")
          print(f"baseline_score={baseline_score}")
          print(f"current_sprint={current_sprint}")
          print(f"mode={mode}")
          print(f"initialized={mode != 'none'}")
          
          # Output for GitHub Actions
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"current_score={current_score}\n")
              f.write(f"baseline_score={baseline_score}\n")
              f.write(f"current_sprint={current_sprint}\n")
              f.write(f"mode={mode}\n")
              f.write(f"initialized={mode != 'none'}\n")
          PYTHON_EOF
      
      # =====================================================================
      # DAILY MONITORING & PROGRESS REPORT
      # =====================================================================
      
      - name: üìä Generate Daily Progress Report
        if: |
          github.event.schedule == '0 9,21 * * *' || 
          github.event.inputs.action == 'daily_report'
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          from datetime import datetime
          sys.path.insert(0, os.getcwd())
          
          from python_advanced_job_engine import AdvancedJobEngine
          
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          
          if engine.state.get('mode') is None:
              print("\n‚ö†Ô∏è  Workflow not initialized yet.")
              print("   Run 'full_analysis' action first with your CV and job description.")
              exit(0)
          
          print("\n" + "="*80)
          print(f"DAILY PROGRESS REPORT - {datetime.now().strftime('%Y-%m-%d %H:%M')}")
          print("="*80)
          
          # Display the dashboard
          engine.display_progress_dashboard()
          
          # Check if sprint reminder needed
          if engine.sprint_history:
              last_sprint = engine.sprint_history[-1]
              if not last_sprint.get('completed', False):
                  days_logged = len(last_sprint.get('daily_logs', []))
                  print(f"\n‚è∞ SPRINT REMINDER:")
                  print(f"   Current sprint: {last_sprint['sprint_number']}")
                  print(f"   Days logged: {days_logged}/14")
                  print(f"   Don't forget to log today's progress!")
          
          print("\n" + "="*80)
          PYTHON_EOF
      
      # =====================================================================
      # QUALITY GATE CHECK
      # =====================================================================
      
      - name: üö™ Check Quality Gates
        if: |
          github.event.schedule == '0 9,21 * * *' || 
          github.event.inputs.action == 'quality_check'
        id: quality_gates
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          
          from python_advanced_job_engine import AdvancedJobEngine
          
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          
          if engine.state.get('mode') is None:
              print("‚ö†Ô∏è  No workflow initialized")
              exit(0)
          
          print("\n" + "="*80)
          print("QUALITY GATE ASSESSMENT")
          print("="*80)
          
          # Check quality gates
          gates_status = engine.check_quality_gates()
          
          state = engine.state
          score = state['current_score']
          projects = len(state['projects_completed'])
          
          print(f"\nüìä Current Status:")
          print(f"   Match Score: {score}%")
          print(f"   Projects: {projects}")
          print(f"   Skills Mastered: {len(state['skills_mastered'])}")
          
          print(f"\nüö™ Quality Gates:")
          for gate_name, passed in gates_status.items():
              status = "‚úÖ" if passed else "‚è≥"
              req = engine.QUALITY_GATES[gate_name]
              print(f"   {status} {gate_name.upper()}")
              print(f"      Score: {score}/{req['score']}%")
              print(f"      Projects: {projects}/{req['projects']}")
          
          # Check if ready for applications
          if gates_status.get('application_ready', False):
              print(f"\nüéâ CONGRATULATIONS!")
              print(f"   You've passed all quality gates!")
              print(f"   YOU ARE NOW APPLICATION-READY! üöÄ")
              
              # Output for notifications
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("application_ready=true\n")
          else:
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("application_ready=false\n")
          
          print("\n" + "="*80)
          PYTHON_EOF
      
      # =====================================================================
      # FULL JOB ANALYSIS (Initial or Re-analysis)
      # =====================================================================


      - name: üéØ Run Full Job Analysis
        if: github.event.inputs.action == 'full_analysis'
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          from pathlib import Path
          sys.path.insert(0, os.getcwd())
    
          from python_advanced_job_engine import AdvancedJobEngine
    
          # Get file paths
          cv_path = "${{ github.event.inputs.cv_path }}"
          job_path = "${{ github.event.inputs.job_path }}"
          
          print("\n" + "="*80)
          print("FULL JOB ANALYSIS")
          print("="*80)
    
          # Initialize engine
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
    
          # Use analyze_from_files which supports .txt, .pdf, .docx
          print("\nüìä Analyzing job vs CV (supports .txt, .pdf, .docx)...")
          
          try:
            analysis = engine.analyze_from_files(
            cv_file=cv_path,
            job_file=job_path,
            job_title="Target Role",
            company="Target Company"
            )
          except FileNotFoundError as e:
            print(f"‚ùå {e}")
            exit(1)
          except ImportError as e:
            print(f"‚ùå {e}")
            print("\nüí° Install required libraries:")
            print("   pip install PyPDF2 python-docx")
            exit(1)
          except Exception as e:
            print(f"‚ùå Error: {e}")
            exit(1)
          
          # Create learning plan (Reverse mode)
          print("\nüìö Creating learning plan (REVERSE mode)...")
          learning_plan = engine.create_learning_plan(analysis, mode="reverse")
          
          # Create improvement strategy
          print("\nüéØ Creating improvement strategy...")
          strategy = engine.create_improvement_strategy(analysis, learning_plan)
          
          # Generate skill tests
          print("\nüìù Generating skill tests...")
          missing_skills = analysis['gaps']['missing_required_skills'][:5]
          tests = engine.generate_skill_tests(missing_skills)
          
          # Generate letters
          print("\n‚úâÔ∏è  Generating application materials...")
          letters = engine.generate_recruiter_letter(analysis, learning_plan)
          
          # Update state
          engine.state['baseline_score'] = analysis['score']['total_score']
          engine.state['current_score'] = analysis['score']['total_score']
          engine.state['mode'] = 'reverse'
          engine.state['current_stage'] = 'baseline'
          engine._save_json(engine.state_file, engine.state)
          
          # Display results
          print("\n" + "="*80)
          print("ANALYSIS COMPLETE")
          print("="*80)
          print(f"\nüìä Match Score: {analysis['score']['total_score']}%")
          print(f"üìã Missing Skills: {len(analysis['gaps']['missing_required_skills'])}")
          print(f"‚è±Ô∏è  Timeline: {learning_plan['estimated_duration']}")
          print(f"\n‚úÖ All data saved to: {engine.data_dir}")
          print(f"\nüöÄ Next Step: Start your first sprint!")
          print("="*80)
          PYTHON_EOF
      
      # =====================================================================
      # START NEW SPRINT
      # =====================================================================
      
      - name: üèÉ Start Sprint
        if: github.event.inputs.action == 'start_sprint'
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          
          from python_advanced_job_engine import AdvancedJobEngine
          
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          
          if engine.state.get('mode') is None:
              print("‚ùå Workflow not initialized. Run 'full_analysis' first.")
              exit(1)
          
          # Get next skills to work on from learning plan
          if not engine.learning_progress:
              print("‚ùå No learning plan found. Run 'full_analysis' first.")
              exit(1)
          
          plan = engine.learning_progress[-1]
          
          # Get next skills from study level
          skills_to_learn = []
          for item in plan['levels']['study']:
              if item['skill'].lower() not in [s.lower() for s in engine.state.get('skills_mastered', [])]:
                  skills_to_learn.append(item['skill'])
                  if len(skills_to_learn) >= 2:
                      break
          
          if not skills_to_learn:
              # Try practice level
              for item in plan['levels']['practice']:
                  if item['skill'].lower() not in [s.lower() for s in engine.state.get('skills_mastered', [])]:
                      skills_to_learn.append(item['skill'])
                      if len(skills_to_learn) >= 2:
                          break
          
          if not skills_to_learn:
              print("üéâ All planned skills mastered! Consider:")
              print("   1. Re-analyze with updated CV")
              print("   2. Add more advanced skills")
              print("   3. Focus on positioning and branding")
              exit(0)
          
          project_goal = f"Build project demonstrating {' and '.join(skills_to_learn)}"
          
          # Start sprint
          sprint = engine.start_sprint(skills_to_learn, project_goal)
          
          print("\nüìå To log daily progress, run:")
          print("   workflow_dispatch with action: log_daily")
          PYTHON_EOF
      
      # =====================================================================
      # END CURRENT SPRINT
      # =====================================================================
      
      - name: üèÅ End Sprint
        if: github.event.inputs.action == 'end_sprint'
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          
          from python_advanced_job_engine import AdvancedJobEngine
          from pathlib import Path
          
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          
          if not engine.sprint_history:
              print("‚ùå No active sprint found.")
              exit(1)
          
          current_sprint = engine.sprint_history[-1]
          
          if current_sprint.get('completed', False):
              print("‚ùå Current sprint already completed.")
              print("   Start a new sprint with 'start_sprint' action")
              exit(1)
          
          print("\n" + "="*80)
          print(f"ENDING SPRINT {current_sprint['sprint_number']}")
          print("="*80)
          
          # Prompt for project URL and test scores
          print("\n‚ö†Ô∏è  This is a simulation. In real usage:")
          print("   1. Provide project URL via workflow input")
          print("   2. Provide test scores via workflow input")
          print("   3. Or use GitHub Issues/Discussions for input")
          
          # Simulated scores (in real use, get from inputs)
          project_url = "https://github.com/user/sprint-project"
          test_scores = {
              skill: 70.0  # Baseline passing score
              for skill in current_sprint['skills_targeted']
          }
          
          # End sprint
          result = engine.end_sprint(project_url, test_scores)

          # Re-analyze with updated CV
          cv_path = "${{ github.event.inputs.cv_path }}"
          job_path = "${{ github.event.inputs.job_path }}"

          try:
              print("\nüîÑ Re-analyzing job match...")
              analysis = engine.analyze_from_files(cv_path, job_path)
              new_score = analysis['score']['total_score']
              old_score = engine.state['current_score']
              
              engine.state['current_score'] = new_score
              engine._save_json(engine.state_file, engine.state)
              
              print(f"\nüìä Score Update:")
              print(f"   Previous: {old_score}%")
              print(f"   Current:  {new_score}%")
              print(f"   Change:   {new_score - old_score:+.1f}%")
          
          print("\n" + "="*80)
          PYTHON_EOF
      
      # =====================================================================
      # SPRINT RECOMMENDATIONS
      # =====================================================================
      
      - name: üí° Generate Sprint Recommendations
        if: steps.init_engine.outputs.initialized == 'true'
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          
          from python_advanced_job_engine import AdvancedJobEngine
          
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          
          if not engine.sprint_history:
              print("\nüí° No sprints completed yet.")
              print("   Start your first sprint to begin tracking!")
              exit(0)
          
          completed_sprints = [s for s in engine.sprint_history if s.get('completed')]
          
          if not completed_sprints:
              print("\n‚è≥ Sprint in progress...")
              current = engine.sprint_history[-1]
              days_logged = len(current.get('daily_logs', []))
              print(f"   Sprint {current['sprint_number']}: Day {days_logged}/14")
              exit(0)
          
          last_sprint = completed_sprints[-1]
          
          print("\n" + "="*80)
          print("SPRINT RECOMMENDATIONS")
          print("="*80)
          
          improvement = last_sprint.get('score_improvement', 0)
          
          print(f"\nüìä Last Sprint Performance:")
          print(f"   Score Improvement: {improvement:+.1f}%")
          print(f"   Total Hours: {last_sprint.get('total_hours', 0):.1f}h")
          
          print(f"\nüí° Recommendations:")
          
          if improvement < 3:
              print("   ‚ö†Ô∏è  Slow Progress Detected")
              print("   ‚Ä¢ Focus on ONE skill per sprint instead of multiple")
              print("   ‚Ä¢ Spend more time on fundamentals")
              print("   ‚Ä¢ Consider getting mentorship or tutoring")
              print("   ‚Ä¢ Extend sprint to 21 days if needed")
              print("   ‚Ä¢ Review learning resources - try different ones")
          elif improvement > 10:
              print("   üöÄ Excellent Progress!")
              print("   ‚Ä¢ You're learning quickly - great job!")
              print("   ‚Ä¢ Consider tackling more advanced topics")
              print("   ‚Ä¢ You could reduce sprint to 10 days")
              print("   ‚Ä¢ Add complexity to projects")
              print("   ‚Ä¢ Help others to reinforce learning")
          else:
              print("   ‚úÖ Good Steady Progress")
              print("   ‚Ä¢ Current approach is working well")
              print("   ‚Ä¢ Maintain consistency")
              print("   ‚Ä¢ Continue with current sprint structure")
              print("   ‚Ä¢ Consider increasing project complexity")
          
          # Next sprint suggestion
          state = engine.state
          if state['current_score'] < 65:
              print(f"\nüéØ Next Sprint Focus: FOUNDATION")
              print(f"   ‚Ä¢ Core Tier 1 skills")
              print(f"   ‚Ä¢ Basic projects")
              print(f"   ‚Ä¢ Beginner tests")
          elif state['current_score'] < 80:
              print(f"\nüéØ Next Sprint Focus: SKILL BUILDING")
              print(f"   ‚Ä¢ Intermediate topics")
              print(f"   ‚Ä¢ Medium complexity projects")
              print(f"   ‚Ä¢ Intermediate tests")
          elif state['current_score'] < 90:
              print(f"\nüéØ Next Sprint Focus: MASTERY")
              print(f"   ‚Ä¢ Advanced concepts")
              print(f"   ‚Ä¢ Production-grade projects")
              print(f"   ‚Ä¢ Advanced tests")
          else:
              print(f"\nüéØ Next Focus: POSITIONING")
              print(f"   ‚Ä¢ Professional branding")
              print(f"   ‚Ä¢ Network building")
              print(f"   ‚Ä¢ Application preparation")
          
          print("\n" + "="*80)
          PYTHON_EOF
      
      # =====================================================================
      # MILESTONE NOTIFICATIONS
      # =====================================================================
      
      - name: üéâ Check for Milestones
        if: steps.init_engine.outputs.initialized == 'true'
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          
          from python_advanced_job_engine import AdvancedJobEngine
          
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          state = engine.state
          
          score = state.get('current_score', 0)
          baseline = state.get('baseline_score', 0)
          gates = state.get('quality_gates_passed', [])
          
          milestones = []
          
          # Score milestones
          if score >= 50 and baseline < 50:
              milestones.append("üéØ Reached 50% Match Score!")
          if score >= 65 and 'foundation' in gates:
              milestones.append("üèÜ FOUNDATION GATE PASSED!")
          if score >= 75 and baseline < 75:
              milestones.append("üéØ Reached 75% Match Score!")
          if score >= 80 and 'competency' in gates:
              milestones.append("üèÜ COMPETENCY GATE PASSED!")
          if score >= 90 and 'mastery' in gates:
              milestones.append("üèÜ MASTERY GATE PASSED!")
          
          # Sprint milestones
          sprint_count = len([s for s in engine.sprint_history if s.get('completed')])
          if sprint_count == 1:
              milestones.append("üéä First Sprint Complete!")
          elif sprint_count == 5:
              milestones.append("üéä Five Sprints Complete!")
          elif sprint_count == 10:
              milestones.append("üéä Ten Sprints Complete - You're Dedicated!")
          
          # Skill milestones
          skills_count = len(state.get('skills_mastered', []))
          if skills_count == 1:
              milestones.append("‚ú® First Skill Mastered!")
          elif skills_count == 5:
              milestones.append("‚ú® Five Skills Mastered!")
          elif skills_count == 10:
              milestones.append("‚ú® Ten Skills Mastered - Impressive!")
          
          # Project milestones
          projects = len(state.get('projects_completed', []))
          if projects == 1:
              milestones.append("üöÄ First Project Complete!")
          elif projects == 5:
              milestones.append("üöÄ Five Projects Complete!")
          
          # Application readiness
          if state.get('application_ready', False):
              milestones.append("üéâ APPLICATION READY - TIME TO APPLY!")
          
          if milestones:
              print("\n" + "="*80)
              print("üéâ MILESTONES ACHIEVED!")
              print("="*80)
              for milestone in milestones:
                  print(f"\n   {milestone}")
              print("\n" + "="*80)
          PYTHON_EOF
      
      # =====================================================================
      # GENERATE SUMMARY REPORT
      # =====================================================================
      
      - name: üìÑ Generate Summary Report
        if: always()
        run: |
          python << 'PYTHON_EOF'
          import sys
          import os
          from datetime import datetime
          from pathlib import Path
          sys.path.insert(0, os.getcwd())
          
          from python_advanced_job_engine import AdvancedJobEngine
          
          engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
          
          if engine.state.get('mode') is None:
              print("\nüìã Workflow not initialized yet")
              print("   Run with action='full_analysis' to get started")
              exit(0)
          
          # Create markdown report
          state = engine.state
          score = state['current_score']
          baseline = state['baseline_score']
          improvement = score - baseline
          
          report_content = f"""# Reverse-Engine Job Search Progress

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Mode:** {state.get('mode', 'N/A').upper()}

---

## üìä Match Score Progress

| Metric | Value |
|--------|-------|
| Baseline Score | {baseline}% |
| Current Score | {score}% |
| Improvement | +{improvement}% |
| Target Score | {state.get('target_score', 90)}% |
| Remaining | {state.get('target_score', 90) - score}% |

---

## üéØ Skills Mastered ({len(state.get('skills_mastered', []))})

"""
          
          for skill in state.get('skills_mastered', []):
              report_content += f"- ‚úÖ {skill}\n"
          
          report_content += f"""
---

## üèóÔ∏è Projects Completed ({len(state.get('projects_completed', []))})

"""
          
          for i, proj in enumerate(state.get('projects_completed', []), 1):
              report_content += f"{i}. **{proj['goal']}**\n"
              report_content += f"   - Skills: {', '.join(proj['skills'])}\n"
              report_content += f"   - URL: {proj['url']}\n\n"
          
          report_content += f"""
---

## üö™ Quality Gates

| Gate | Status | Required |
|------|--------|----------|
| Foundation | {'‚úÖ Passed' if 'foundation' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 65% score, 2 projects |
| Competency | {'‚úÖ Passed' if 'competency' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 80% score, 4 projects |
| Mastery | {'‚úÖ Passed' if 'mastery' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 90% score, 5 projects |
| Application Ready | {'‚úÖ Passed' if state.get('application_ready') else '‚è≥ Pending'} | All gates + branding |

---

## üìà Sprint Progress

- **Total Sprints:** {state.get('current_sprint', 0)}
- **Current Stage:** {state.get('current_stage', 'baseline').replace('_', ' ').title()}
- **Started:** {state.get('started_date', 'N/A')[:10]}

---

## üéØ Current Status

"""
          
          if score < 65:
              report_content += """**Focus:** Foundation Building
- Master Tier 1 critical skills
- Build foundational projects
- Pass beginner-level tests
"""
          elif score < 80:
              report_content += """**Focus:** Skill Development
- Deepen intermediate skills
- Build complex projects
- Pass intermediate tests
"""
          elif score < 90:
              report_content += """**Focus:** Advanced Mastery
- Master advanced concepts
- Build production-grade projects
- Pass advanced tests
"""
          else:
              report_content += """**Focus:** Application Preparation
- Polish professional brand
- Build network connections
- Prepare application materials
- **YOU'RE READY TO APPLY! üéâ**
"""
          
          # Save report
          report_path = Path("PROGRESS_REPORT.md")
          report_path.write_text(report_content)
          
          print("\n‚úÖ Summary report generated: PROGRESS_REPORT.md")
          print(report_content)
          PYTHON_EOF
      
      # =====================================================================
      # UPLOAD ARTIFACTS
      # =====================================================================
      
      - name: üì§ Upload Progress Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: progress-report-${{ github.run_number }}
          path: |
            PROGRESS_REPORT.md
            ${{ env.DATA_DIR }}/*.json
          retention-days: 90
      
      # =====================================================================
      # FINAL NOTIFICATION
      # =====================================================================
      
      - name: üîî Final Status
        if: always()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Reverse-Engine Workflow Complete"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "üìä Check the artifacts for detailed progress reports"
          echo "üìÅ All data saved in: ${{ env.DATA_DIR }}"
          echo ""
          echo "üöÄ Keep building towards that 90%+ match score!"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
