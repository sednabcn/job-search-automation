name: CV Job Matcher Automation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'cv/**'
      - 'jobs/**'
      - 'cv_job_matcher.py'
  
  pull_request:
    branches: [ main, master ]
  
  workflow_dispatch:
    inputs:
      cv_file:
        description: 'CV file path (relative to repo root)'
        required: false
        default: 'cv/my_cv.txt'
      job_file:
        description: 'Job description file path'
        required: false
        default: 'jobs/latest_job.txt'
      mode:
        description: 'Analysis mode'
        required: true
        default: 'batch'
        type: choice
        options:
          - single
          - batch
          - compare

  schedule:
    - cron: '0 9 * * *'

env:
  PYTHON_VERSION: '3.9'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cv_exists: ${{ steps.check_files.outputs.cv_exists }}
      jobs_exist: ${{ steps.check_files.outputs.jobs_exist }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for CV and job files
        id: check_files
        run: |
          if [ -d "cv" ] && [ "$(ls -A cv)" ]; then
            echo "cv_exists=true" >> $GITHUB_OUTPUT
          else
            echo "cv_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -d "jobs" ] && [ "$(ls -A jobs)" ]; then
            echo "jobs_exist=true" >> $GITHUB_OUTPUT
          else
            echo "jobs_exist=false" >> $GITHUB_OUTPUT
          fi

  analyze-single:
    needs: setup
    if: |
      needs.setup.outputs.cv_exists == 'true' && 
      needs.setup.outputs.jobs_exist == 'true' &&
      (github.event.inputs.mode == 'single' || github.event.inputs.mode == '')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      
      - name: Run CV-Job Matcher (Single Job)
        run: |
          # Create reports directory
          mkdir -p reports
          
          # Run analysis using Python script directly
          python3 << 'PYTHON_SCRIPT'
          import sys
          from pathlib import Path
          
          # Import the matcher
          sys.path.insert(0, '.')
          from cv_job_matcher import CVJobMatcher
          
          matcher = CVJobMatcher()
          
          # Load CV
          cv_file = Path('${{ github.event.inputs.cv_file }}' or 'cv/my_cv.txt')
          if not cv_file.exists():
              # Try to find any CV file
              cv_files = list(Path('cv').glob('*.txt'))
              if cv_files:
                  cv_file = cv_files[0]
              else:
                  print("❌ No CV file found")
                  sys.exit(1)
          
          cv_text = cv_file.read_text()
          print(f"✓ Loaded CV from {cv_file}")
          
          # Load job description
          job_file = Path('${{ github.event.inputs.job_file }}' or 'jobs/latest_job.txt')
          if not job_file.exists():
              # Try to find any job file
              job_files = list(Path('jobs').glob('*.txt'))
              if job_files:
                  job_file = job_files[0]
              else:
                  print("❌ No job file found")
                  sys.exit(1)
          
          job_text = job_file.read_text()
          print(f"✓ Loaded job from {job_file}")
          
          # Run analysis
          print("\n🔍 Analyzing job match...\n")
          result = matcher.analyze_job(cv_text, job_text)
          
          # Generate report
          report = matcher.generate_report(result)
          
          # Save report
          from datetime import datetime
          report_file = Path('reports') / f'analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
          report_file.write_text(report)
          
          print(f"✅ Report saved to {report_file}")
          print("\n" + "="*80)
          print(report)
          PYTHON_SCRIPT
      
      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: job-analysis-report
          path: reports/*.txt
          retention-days: 90
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            if (!fs.existsSync('reports')) {
              console.log('No reports directory found');
              return;
            }
            
            const reportFiles = fs.readdirSync('reports').filter(f => f.endsWith('.txt'));
            if (reportFiles.length > 0) {
              const reportContent = fs.readFileSync(path.join('reports', reportFiles[0]), 'utf8');
              const lines = reportContent.split('\n');
              const summary = lines.slice(0, 50).join('\n');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🎯 CV-Job Match Analysis\n\n\`\`\`\n${summary}\n...\n\`\`\`\n\n📎 Full report available in artifacts.`
              });
            }

  analyze-batch:
    needs: setup
    if: |
      needs.setup.outputs.cv_exists == 'true' && 
      needs.setup.outputs.jobs_exist == 'true' &&
      (github.event.inputs.mode == 'batch' || github.event.inputs.mode == '' || github.event_name == 'schedule')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      
      - name: Run batch analysis
        run: |
          mkdir -p reports
          
          python3 << 'PYTHON_SCRIPT'
          import sys
          from pathlib import Path
          
          sys.path.insert(0, '.')
          from cv_job_matcher import CVJobMatcher
          
          matcher = CVJobMatcher()
          
          # Load CV
          cv_files = list(Path('cv').glob('*.txt'))
          if not cv_files:
              print("❌ No CV files found")
              sys.exit(1)
          
          cv_file = cv_files[0]
          cv_text = cv_file.read_text()
          print(f"✓ Loaded CV from {cv_file}")
          
          # Load all job descriptions
          jobs_dir = Path('jobs')
          jobs = []
          
          for job_file in sorted(jobs_dir.glob('*.txt')):
              job_text = job_file.read_text()
              jobs.append({
                  'title': job_file.stem.replace('_', ' ').replace('-', ' ').title(),
                  'company': 'Unknown',
                  'description': job_text
              })
          
          if not jobs:
              print("❌ No job files found")
              sys.exit(1)
          
          # Run comparison
          print(f"\n📊 Analyzing {len(jobs)} job offer(s)...\n")
          report = matcher.compare_jobs(cv_text, jobs)
          
          # Save report
          from datetime import datetime
          report_file = Path('reports') / f'batch_analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
          report_file.write_text(report)
          
          print(f"✅ Report saved to {report_file}")
          print("\n" + "="*80)
          print(report)
          PYTHON_SCRIPT
      
      - name: Upload batch report
        uses: actions/upload-artifact@v4
        with:
          name: batch-analysis-report
          path: reports/*.txt
          retention-days: 90
      
      - name: Create job summary
        run: |
          echo "## 📊 Batch Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f reports/batch_analysis_*.txt ]; then
            latest_report=$(ls -t reports/batch_analysis_*.txt 2>/dev/null | head -1)
            if [ -n "$latest_report" ]; then
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              head -100 "$latest_report" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  notify:
    needs: [analyze-single, analyze-batch]
    if: |
      always() && 
      (needs.analyze-single.result == 'success' || needs.analyze-batch.result == 'success') &&
      (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

       - name: Send email notification
         if: vars.ENABLE_EMAIL_NOTIFICATIONS == 'true'
         uses: dawidd6/action-send-mail@v3
         continue-on-error: true
         with:
           server_address: smtp.gmail.com
           server_port: SMTP_PORT
           username: ${{ secrets.SMTP__USER }}
           password: ${{ secrets.SMTP_PASS }}
           subject: "CV-Job Match Analysis Complete 🎯"
           to: ${{ secrets.NOTIFICATION_EMAIL }}
           from: "CV Job Matcher Bot"
           body: |
             Your CV-Job match analysis is complete!
            
             Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
             Check the artifacts for detailed reports.
           ignore_cert: true
           convert_markdown: true  
  
  update-tracking:
    needs: [analyze-single, analyze-batch]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Update CSV tracking file
        run: |
          mkdir -p tracking
          
          # Create or update tracking CSV
          if [ ! -f tracking/job_applications.csv ]; then
            echo "Date,Job_Title,Company,Match_Score,Status,Notes" > tracking/job_applications.csv
          fi
          
          # Add entry (simplified example)
          echo "$(date +%Y-%m-%d),Analyzed Jobs,Multiple,N/A,Analyzed,Auto-analyzed by GitHub Actions" >> tracking/job_applications.csv
      
      - name: Commit tracking updates
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add tracking/
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update job application tracking [skip ci]" && git push)

  archive-reports:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Archive old reports
        run: |
          mkdir -p archive
          
          # Move reports older than 30 days to archive
          if [ -d "reports" ]; then
            find reports -name "*.txt" -mtime +30 -exec mv {} archive/ \; 2>/dev/null || true
          fi
          
          # Compress archive
          if [ -d "archive" ] && [ "$(ls -A archive)" ]; then
            tar -czf archive_$(date +%Y%m).tar.gz archive/*.txt
            rm archive/*.txt
          fi
      
      - name: Commit archives
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add archive/ reports/ 2>/dev/null || true
          git diff --quiet && git diff --staged --quiet || (git commit -m "Archive old reports [skip ci]" && git push)
