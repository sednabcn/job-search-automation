name: Automated Job Search System

on:
  # Combine both schedules under one key
  schedule:
    - cron: "0 9 * * *"    # 9 AM UTC every day (daily routine)
    - cron: "0 10 * * 1"   # 10 AM UTC every Monday (weekly analysis)
    
  # Manual trigger
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        required: true
        type: choice
        options:
          - 'daily_routine'
          - 'generate_digest'
          - 'check_followups'
          - 'analyze_performance'
          - 'network_reminders'
          - 'linkedin_check'
          - 'full_report'
      
      send_notifications:
        description: 'Send email notifications'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  issues: write
  actions: write

env:
  PYTHON_VERSION: '3.11'
  TRACKING_DIR: 'job_search'
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL || 'your.email@domain.com' }}

jobs:
  daily-morning-routine:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * *' || github.event.inputs.task == 'daily_routine'
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      
      - name: Ensure job search directory structure
        run: |
          mkdir -p $TRACKING_DIR/{applications,network,searches,deadlines,reports}
          
          # Initialize tracking files if they don't exist
          for file in applications network_contacts discovered_jobs linkedin_activity; do
            if [ ! -f "$TRACKING_DIR/${file}.json" ]; then
              echo "[]" > "$TRACKING_DIR/${file}.json"
            fi
          done
          
          echo "Directory structure ready"
      
      - name: Generate daily summary
        run: |
          echo "Generating daily summary..."
          
          cat > job_search/reports/daily_summary.md << 'EOF'
          # Daily Job Search Summary
          ## $(date +"%Y-%m-%d %A")
          
          ### ðŸ“Š Today's Overview
          
          **Job Digest:**
          - New relevant jobs discovered
          - Check saved searches
          
          **Follow-ups Needed:**
          - Applications to follow up on (7, 14, 30 days)
          
          **Networking:**
          - Contacts to reach out to
          
          **LinkedIn:**
          - Connection requests available today (5 max)
          
          ### ðŸŽ¯ Today's Action Items
          
          1. Review new job postings
          2. Follow up on pending applications
          3. Reach out to networking contacts
          4. Send LinkedIn connection requests (if available)
          
          ---
          *Generated automatically by Job Search Automation System*
          EOF
          
          echo "Daily summary generated"
      
      - name: Commit and push updates
        run: |
          git config --global user.name "Job Search Bot"
          git config --global user.email "bot@jobsearch.local"
          
          git add job_search/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Daily job search update - $(date +%Y-%m-%d)"
            git push
            echo "âœ… Updates committed and pushed"
          fi
      
      - name: Create GitHub issue with daily summary
        if: github.event.inputs.send_notifications != 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python << 'EOF'
          import os
          import json
          import requests
          from datetime import datetime
          from pathlib import Path
          
          github_token = os.environ.get('GITHUB_TOKEN')
          if not github_token:
              print("No GitHub token - skipping issue creation")
              exit(0)
          
          repo = os.environ.get('GITHUB_REPOSITORY')
          
          # Read summary
          summary_file = Path('job_search/reports/daily_summary.md')
          if summary_file.exists():
              with open(summary_file) as f:
                  summary = f.read()
          else:
              summary = "Daily summary not available"
          
          # Create issue
          title = f"Daily Job Search Report - {datetime.now().strftime('%Y-%m-%d')}"
          
          headers = {
              'Authorization': f'token {github_token}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          data = {
              'title': title,
              'body': summary,
              'labels': ['job-search', 'daily-report', 'automated']
          }
          
          try:
              response = requests.post(
                  f'https://api.github.com/repos/{repo}/issues',
                  headers=headers,
                  json=data,
                  timeout=30
              )
              
              if response.status_code == 201:
                  issue = response.json()
                  print(f"âœ… Created issue #{issue['number']}: {title}")
                  print(f"  URL: {issue['html_url']}")
              else:
                  print(f"Failed to create issue: {response.status_code}")
          
          except Exception as e:
              print(f"Error creating issue: {e}")
          EOF

  weekly-analysis:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 10 * * 1' || github.event.inputs.task == 'analyze_performance'
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Generate weekly performance report
        run: |
          echo "=== WEEKLY JOB SEARCH REPORT ==="
          echo "Week of: $(date +%Y-%m-%d)"
          echo ""
          echo "Check job_search/ directory for detailed data"
          echo "Review GitHub issues for daily reports"
      
      - name: Commit weekly report
        run: |
          git config --global user.name "Job Search Bot"
          git config --global user.email "bot@jobsearch.local"
          
          echo "Weekly report - $(date +%Y-%m-%d)" > job_search/reports/weekly_summary.txt
          
          git add job_search/reports/
          git commit -m "Weekly performance report - $(date +%Y-%m-%d)" || echo "No changes"
          git push || echo "Nothing to push"
